// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: span.proto

package uniottrans

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpanStatus int32

const (
	SpanStatus_OK       SpanStatus = 0
	SpanStatus_Error    SpanStatus = 1
	SpanStatus_Recovery SpanStatus = 2
	SpanStatus_Crash    SpanStatus = 3
)

// Enum value maps for SpanStatus.
var (
	SpanStatus_name = map[int32]string{
		0: "OK",
		1: "Error",
		2: "Recovery",
		3: "Crash",
	}
	SpanStatus_value = map[string]int32{
		"OK":       0,
		"Error":    1,
		"Recovery": 2,
		"Crash":    3,
	}
)

func (x SpanStatus) Enum() *SpanStatus {
	p := new(SpanStatus)
	*p = x
	return p
}

func (x SpanStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_span_proto_enumTypes[0].Descriptor()
}

func (SpanStatus) Type() protoreflect.EnumType {
	return &file_span_proto_enumTypes[0]
}

func (x SpanStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanStatus.Descriptor instead.
func (SpanStatus) EnumDescriptor() ([]byte, []int) {
	return file_span_proto_rawDescGZIP(), []int{0}
}

type DataSource int32

const (
	DataSource_Customer      DataSource = 0
	DataSource_DataDog       DataSource = 1
	DataSource_Jaeger        DataSource = 2
	DataSource_OpenTelemetry DataSource = 3
	DataSource_Pinpoint      DataSource = 4
	DataSource_SkyWalking    DataSource = 5
	DataSource_Zipkin        DataSource = 6
)

// Enum value maps for DataSource.
var (
	DataSource_name = map[int32]string{
		0: "Customer",
		1: "DataDog",
		2: "Jaeger",
		3: "OpenTelemetry",
		4: "Pinpoint",
		5: "SkyWalking",
		6: "Zipkin",
	}
	DataSource_value = map[string]int32{
		"Customer":      0,
		"DataDog":       1,
		"Jaeger":        2,
		"OpenTelemetry": 3,
		"Pinpoint":      4,
		"SkyWalking":    5,
		"Zipkin":        6,
	}
)

func (x DataSource) Enum() *DataSource {
	p := new(DataSource)
	*p = x
	return p
}

func (x DataSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSource) Descriptor() protoreflect.EnumDescriptor {
	return file_span_proto_enumTypes[1].Descriptor()
}

func (DataSource) Type() protoreflect.EnumType {
	return &file_span_proto_enumTypes[1]
}

func (x DataSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSource.Descriptor instead.
func (DataSource) EnumDescriptor() ([]byte, []int) {
	return file_span_proto_rawDescGZIP(), []int{1}
}

type SamplePriority int32

const (
	SamplePriority_AutoKeep     SamplePriority = 0
	SamplePriority_AutoBlock    SamplePriority = 1
	SamplePriority_SamplerKeep  SamplePriority = 2
	SamplePriority_SamplerBlock SamplePriority = 3
	SamplePriority_UserKeep     SamplePriority = 4
	SamplePriority_UserBlock    SamplePriority = 5
)

// Enum value maps for SamplePriority.
var (
	SamplePriority_name = map[int32]string{
		0: "AutoKeep",
		1: "AutoBlock",
		2: "SamplerKeep",
		3: "SamplerBlock",
		4: "UserKeep",
		5: "UserBlock",
	}
	SamplePriority_value = map[string]int32{
		"AutoKeep":     0,
		"AutoBlock":    1,
		"SamplerKeep":  2,
		"SamplerBlock": 3,
		"UserKeep":     4,
		"UserBlock":    5,
	}
)

func (x SamplePriority) Enum() *SamplePriority {
	p := new(SamplePriority)
	*p = x
	return p
}

func (x SamplePriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SamplePriority) Descriptor() protoreflect.EnumDescriptor {
	return file_span_proto_enumTypes[2].Descriptor()
}

func (SamplePriority) Type() protoreflect.EnumType {
	return &file_span_proto_enumTypes[2]
}

func (x SamplePriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SamplePriority.Descriptor instead.
func (SamplePriority) EnumDescriptor() ([]byte, []int) {
	return file_span_proto_rawDescGZIP(), []int{2}
}

type Numeric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Numeric:
	//	*Numeric_Int32Value
	//	*Numeric_Int64Value
	//	*Numeric_Floatvalue
	//	*Numeric_Doublevalue
	//	*Numeric_Uint32Value
	//	*Numeric_Uint64Value
	Numeric isNumeric_Numeric `protobuf_oneof:"Numeric"`
}

func (x *Numeric) Reset() {
	*x = Numeric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_span_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Numeric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Numeric) ProtoMessage() {}

func (x *Numeric) ProtoReflect() protoreflect.Message {
	mi := &file_span_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Numeric.ProtoReflect.Descriptor instead.
func (*Numeric) Descriptor() ([]byte, []int) {
	return file_span_proto_rawDescGZIP(), []int{0}
}

func (m *Numeric) GetNumeric() isNumeric_Numeric {
	if m != nil {
		return m.Numeric
	}
	return nil
}

func (x *Numeric) GetInt32Value() int32 {
	if x, ok := x.GetNumeric().(*Numeric_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *Numeric) GetInt64Value() int64 {
	if x, ok := x.GetNumeric().(*Numeric_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *Numeric) GetFloatvalue() float32 {
	if x, ok := x.GetNumeric().(*Numeric_Floatvalue); ok {
		return x.Floatvalue
	}
	return 0
}

func (x *Numeric) GetDoublevalue() float64 {
	if x, ok := x.GetNumeric().(*Numeric_Doublevalue); ok {
		return x.Doublevalue
	}
	return 0
}

func (x *Numeric) GetUint32Value() uint32 {
	if x, ok := x.GetNumeric().(*Numeric_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (x *Numeric) GetUint64Value() uint64 {
	if x, ok := x.GetNumeric().(*Numeric_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

type isNumeric_Numeric interface {
	isNumeric_Numeric()
}

type Numeric_Int32Value struct {
	Int32Value int32 `protobuf:"varint,1,opt,name=int32value,proto3,oneof"`
}

type Numeric_Int64Value struct {
	Int64Value int64 `protobuf:"varint,2,opt,name=int64value,proto3,oneof"`
}

type Numeric_Floatvalue struct {
	Floatvalue float32 `protobuf:"fixed32,3,opt,name=floatvalue,proto3,oneof"`
}

type Numeric_Doublevalue struct {
	Doublevalue float64 `protobuf:"fixed64,4,opt,name=doublevalue,proto3,oneof"`
}

type Numeric_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,5,opt,name=uint32value,proto3,oneof"`
}

type Numeric_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,6,opt,name=uint64value,proto3,oneof"`
}

func (*Numeric_Int32Value) isNumeric_Numeric() {}

func (*Numeric_Int64Value) isNumeric_Numeric() {}

func (*Numeric_Floatvalue) isNumeric_Numeric() {}

func (*Numeric_Doublevalue) isNumeric_Numeric() {}

func (*Numeric_Uint32Value) isNumeric_Numeric() {}

func (*Numeric_Uint64Value) isNumeric_Numeric() {}

type Span struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceID   int64               `protobuf:"varint,1,opt,name=TraceID,proto3" json:"TraceID,omitempty"`
	ParentID  int64               `protobuf:"varint,2,opt,name=ParentID,proto3" json:"ParentID,omitempty"`
	SpanID    int64               `protobuf:"varint,3,opt,name=SpanID,proto3" json:"SpanID,omitempty"`
	Service   string              `protobuf:"bytes,4,opt,name=Service,proto3" json:"Service,omitempty"`
	Operation string              `protobuf:"bytes,5,opt,name=Operation,proto3" json:"Operation,omitempty"`
	Meta      map[string]string   `protobuf:"bytes,7,rep,name=Meta,proto3" json:"Meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metrics   map[string]*Numeric `protobuf:"bytes,8,rep,name=Metrics,proto3" json:"Metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status    SpanStatus          `protobuf:"varint,9,opt,name=Status,proto3,enum=universal.opentracing.transformer.SpanStatus" json:"Status,omitempty"`
	StartTime int64               `protobuf:"varint,10,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime   int64               `protobuf:"varint,11,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
}

func (x *Span) Reset() {
	*x = Span{}
	if protoimpl.UnsafeEnabled {
		mi := &file_span_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span) ProtoMessage() {}

func (x *Span) ProtoReflect() protoreflect.Message {
	mi := &file_span_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span.ProtoReflect.Descriptor instead.
func (*Span) Descriptor() ([]byte, []int) {
	return file_span_proto_rawDescGZIP(), []int{1}
}

func (x *Span) GetTraceID() int64 {
	if x != nil {
		return x.TraceID
	}
	return 0
}

func (x *Span) GetParentID() int64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *Span) GetSpanID() int64 {
	if x != nil {
		return x.SpanID
	}
	return 0
}

func (x *Span) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *Span) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *Span) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Span) GetMetrics() map[string]*Numeric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Span) GetStatus() SpanStatus {
	if x != nil {
		return x.Status
	}
	return SpanStatus_OK
}

func (x *Span) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Span) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trace []*Span `protobuf:"bytes,1,rep,name=Trace,proto3" json:"Trace,omitempty"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_span_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_span_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_span_proto_rawDescGZIP(), []int{2}
}

func (x *Trace) GetTrace() []*Span {
	if x != nil {
		return x.Trace
	}
	return nil
}

type Traces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Traces []*Trace `protobuf:"bytes,1,rep,name=Traces,proto3" json:"Traces,omitempty"`
}

func (x *Traces) Reset() {
	*x = Traces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_span_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Traces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Traces) ProtoMessage() {}

func (x *Traces) ProtoReflect() protoreflect.Message {
	mi := &file_span_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Traces.ProtoReflect.Descriptor instead.
func (*Traces) Descriptor() ([]byte, []int) {
	return file_span_proto_rawDescGZIP(), []int{3}
}

func (x *Traces) GetTraces() []*Trace {
	if x != nil {
		return x.Traces
	}
	return nil
}

var File_span_proto protoreflect.FileDescriptor

var file_span_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x70, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x22,
	0xe6, 0x01, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0a, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a,
	0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x20, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x22, 0xc3, 0x04, 0x0a, 0x04, 0x53, 0x70, 0x61,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x61, 0x6e, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x6c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x4e,
	0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x45,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x37, 0x0a,
	0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x66, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x6c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46,
	0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x6c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x52,
	0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x22, 0x4a, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x06, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x2a, 0x38, 0x0a, 0x0a, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x72, 0x61, 0x73, 0x68, 0x10, 0x03, 0x2a, 0x70, 0x0a, 0x0a,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x6f, 0x67, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x69, 0x6e, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x6b, 0x79, 0x57, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67,
	0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x5a, 0x69, 0x70, 0x6b, 0x69, 0x6e, 0x10, 0x06, 0x2a, 0x6d,
	0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x6f, 0x4b, 0x65, 0x65, 0x70, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x75, 0x74, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4b, 0x65, 0x65, 0x70, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x65, 0x70, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x05, 0x42, 0x45, 0x5a,
	0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x64, 0x61,
	0x70, 0x65, 0x57, 0x69, 0x6c, 0x64, 0x2f, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2f, 0x3b, 0x75, 0x6e, 0x69, 0x6f, 0x74, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_span_proto_rawDescOnce sync.Once
	file_span_proto_rawDescData = file_span_proto_rawDesc
)

func file_span_proto_rawDescGZIP() []byte {
	file_span_proto_rawDescOnce.Do(func() {
		file_span_proto_rawDescData = protoimpl.X.CompressGZIP(file_span_proto_rawDescData)
	})
	return file_span_proto_rawDescData
}

var file_span_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_span_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_span_proto_goTypes = []interface{}{
	(SpanStatus)(0),     // 0: universal.opentracing.transformer.SpanStatus
	(DataSource)(0),     // 1: universal.opentracing.transformer.DataSource
	(SamplePriority)(0), // 2: universal.opentracing.transformer.SamplePriority
	(*Numeric)(nil),     // 3: universal.opentracing.transformer.Numeric
	(*Span)(nil),        // 4: universal.opentracing.transformer.Span
	(*Trace)(nil),       // 5: universal.opentracing.transformer.Trace
	(*Traces)(nil),      // 6: universal.opentracing.transformer.Traces
	nil,                 // 7: universal.opentracing.transformer.Span.MetaEntry
	nil,                 // 8: universal.opentracing.transformer.Span.MetricsEntry
}
var file_span_proto_depIdxs = []int32{
	7, // 0: universal.opentracing.transformer.Span.Meta:type_name -> universal.opentracing.transformer.Span.MetaEntry
	8, // 1: universal.opentracing.transformer.Span.Metrics:type_name -> universal.opentracing.transformer.Span.MetricsEntry
	0, // 2: universal.opentracing.transformer.Span.Status:type_name -> universal.opentracing.transformer.SpanStatus
	4, // 3: universal.opentracing.transformer.Trace.Trace:type_name -> universal.opentracing.transformer.Span
	5, // 4: universal.opentracing.transformer.Traces.Traces:type_name -> universal.opentracing.transformer.Trace
	3, // 5: universal.opentracing.transformer.Span.MetricsEntry.value:type_name -> universal.opentracing.transformer.Numeric
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_span_proto_init() }
func file_span_proto_init() {
	if File_span_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_span_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Numeric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_span_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_span_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_span_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Traces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_span_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Numeric_Int32Value)(nil),
		(*Numeric_Int64Value)(nil),
		(*Numeric_Floatvalue)(nil),
		(*Numeric_Doublevalue)(nil),
		(*Numeric_Uint32Value)(nil),
		(*Numeric_Uint64Value)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_span_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_span_proto_goTypes,
		DependencyIndexes: file_span_proto_depIdxs,
		EnumInfos:         file_span_proto_enumTypes,
		MessageInfos:      file_span_proto_msgTypes,
	}.Build()
	File_span_proto = out.File
	file_span_proto_rawDesc = nil
	file_span_proto_goTypes = nil
	file_span_proto_depIdxs = nil
}
